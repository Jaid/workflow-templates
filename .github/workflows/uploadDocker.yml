on:
  workflow_call:
    inputs:
      arch:
        type: string
        required: false
        default: linux/amd64
        description: Image arch to build and push
      dockerHubUser:
        type: string
        required: false
        description: If unset, the Docker Hub user will be the same as the GitHub user
      dockerHubRegistry:
        type: string
        required: false
        default: docker.io
      githubRegistry:
        type: string
        required: false
        default: ghcr.io
      baseTags:
        type: string
        required: false
        default: type=ref,event=branch
      addShaTags:
        type: boolean
        required: false
        default: false
        description: If true, create a Docker image tag named after the commit’s SHA hash (good for persistence and debugging, but might produce a lot of clutter)
      addScheduleTags:
        type: boolean
        required: false
        default: false
        description: If true, create Docker image tags named after the current date (good for persistence and debugging, but might produce a lot of clutter) (only on schedule events)
      addVersionTag:
        type: boolean
        required: false
        default: false
        description: If true, create a Docker image tag named after the new current version (only on push tag events)
      versionTagPrefix:
        type: string
        required: false
        description: Will be appended to the automatically generated version tag (only if addVersionTag is true and event is push tag)
      additionalTags:
        type: string
        required: false
        default: null
      versionTag:
        type: string
        required: false
        default: null
      versionTagSemverPrefix:
        type: string
        required: false
        default: null
        description: If given, this will be the semver’s prefix
      flavorLatest:
        type: string
        required: false
        default: auto
      flavorPrefix:
        type: string
        required: false
      flavorSuffix:
        type: string
        required: false
      flavorConnectionString:
        type: string
        required: false
        default: '-'
      nameSuffix:
        type: string
        required: false
        description: Suffix to append to the job name
      imageSlug:
        type: string
        required: false
        description: Slug of the image
      id:
        type: string
        required: false
        description: ID of the image
      buildOutput:
        type: string
        required: true
        description: Output of the build job in JSON
      title:
        type: string
        required: false
        description: Title of the image
    secrets:
      dockerHubToken:
        required: false
        description: 'Create here with “Read, Write”: https://hub.docker.com/settings/security?generateToken=true'
jobs:
  upload:
    name: upload${{ inputs.nameSuffix }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: checkout
        uses: actions/checkout@v3.5.3
      - name: setupNode
        uses: actions/setup-node@v3.7.0
        with:
          node-version: latest
      - name: installNodePackages
        id: installNodePackages
        uses: jaid/action-npm-install@main
      - id: getInputs
        name: getInputs
        run: node --import tsx .github/workflows/uploadDocker-overlay/getInputs.ts
        env:
          inputs: ${{ toJSON(inputs) }}
      - name: getDockerHubTokenLength
        id: getDockerHubTokenLength
        run: node --import tsx .github/workflows/uploadDocker-overlay/getDockerHubTokenLength.ts
        env:
          secrets: ${{ toJSON(secrets) }}
      - name: getGithubPackagesRef
        id: getGithubPackagesRef
        run: node --import tsx .github/workflows/uploadDocker-overlay/getGithubPackagesRef.ts
        env:
          inputs: ${{ steps.getInputs.outputs.value }}
      - name: getDockerHubRef
        id: getDockerHubRef
        if: ${{ steps.getDockerHubTokenLength.outputs.value > 0 }}
        run: node --import tsx .github/workflows/uploadDocker-overlay/getDockerHubRef.ts
        env:
          inputs: ${{ steps.getInputs.outputs.value }}
          dockerHubTokenLength: ${{ steps.getDockerHubTokenLength.outputs.value }}
      - name: getRefs
        id: getRefs
        run: node --import tsx .github/workflows/uploadDocker-overlay/getRefs.ts
        env:
          inputs: ${{ steps.getInputs.outputs.value }}
          githubRef: ${{ steps.getGithubPackagesRef.outputs.value }}
          dockerHubRef: ${{ steps.getDockerHubRef.outputs.value }}
      - name: prepareVersionTag
        id: prepareVersionTag
        run: node --import tsx .github/workflows/uploadDocker-overlay/prepareVersionTag.ts
        env:
          inputs: ${{ steps.getInputs.outputs.value }}
      - name: getTags
        id: getTags
        run: node --import tsx .github/workflows/uploadDocker-overlay/getTags.ts
        env:
          inputs: ${{ steps.getInputs.outputs.value }}
          versionTag: ${{ steps.prepareVersionTag.outputs.value }}
      - name: login (${{ steps.getInputs.outputs.dockerHubUser }} @ ${{ steps.getInputs.outputs.dockerHubRegistry }})
        if: ${{ steps.getDockerHubTokenLength.outputs.length > 0 }}
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ steps.getInputs.outputs.dockerHubUser }}
          password: ${{ secrets.dockerHubToken }}
      - name: login (${{ github.repository_owner }} @ ${{ steps.getInputs.outputs.githubRegistry }})
        uses: docker/login-action@v2.2.0
        with:
          registry: ${{ steps.getInputs.outputs.githubRegistry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: extractDockerMetadata
        id: extractDockerMetadata
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ steps.getRefs.outputs.value }}
          labels: |
            maintainer=${{ github.repository_owner }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.title=${{ steps.getInputs.outputs.title }}
          tags: ${{ steps.getTags.outputs.value }}
          flavor: |
            latest=${{ steps.getInputs.outputs.flavorLatest }}
            prefix=${{ steps.getInputs.outputs.flavorPrefix && format('{0}{1}', steps.getInputs.outputs.flavorPrefix, steps.getInputs.outputs.flavorConnectionString) || '' }}
            suffix=${{ steps.getInputs.outputs.flavorSuffix && format('{0}{1}', steps.getInputs.outputs.flavorConnectionString, steps.getInputs.outputs.flavorSuffix) || '' }}
      - name: setupQemu
        if: ${{ steps.getInputs.outputs.arch != 'linux/amd64' }}
        uses: docker/setup-qemu-action@v2.2.0
        with:
          platforms: ${{ steps.getInputs.outputs.arch }}
      - name: setupBuildx
        uses: docker/setup-buildx-action@v2.9.1
        with:
          platforms: ${{ steps.getInputs.outputs.arch }}
      - name: dockerPush
        id: dockerPush
        uses: docker/build-push-action@v4.1.1
        with:
          push: true
          platforms: ${{ steps.getInputs.outputs.arch }}
          tags: ${{ steps.extractDockerMetadata.outputs.tags }}
          labels: ${{ steps.extractDockerMetadata.outputs.labels }}
          cache-from: ${{ fromJson(steps.getInputs.outputs.buildInputs).cacheHint }}
          context: ${{ steps.getInputs.outputs.buildContext }}
          build-args: ${{ steps.getInputs.outputs.buildBuildArgs }}