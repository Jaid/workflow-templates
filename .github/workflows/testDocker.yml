name: testDocker
on:
  workflow_call:
    inputs:
      arch:
        type: string
        required: false
        default: linux/amd64
        description: Image arch to build and run
      buildContext:
        type: string
        required: false
        default: src
      buildArgs:
        type: string
        required: false
        default: ''
      dockerRunArgs:
        type: string
        required: false
        default: --init
      appArgs:
        type: string
        required: false
        default: ''
      test:
        type: string
        required: false
        description: 'JavaScript expression to validate the output (included globals: result, inputs)'
        default: ''
    outputs:
      meta:
        value: ${{ jobs.job.outputs.meta }}
jobs:
  job:
    name: ${{ github.event_name }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      meta: ${{ steps.dockerPush.outputs.metadata }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0
      - name: setupNode
        uses: actions/setup-node@v3.6.0
        with:
          node-version: current
      - name: installNodePackages
        shell: bash
        run: |
          cd ..
          npm install --no-package-lock --no-save @actions/core read-file-string execa vm2
      - name: Set up qemu
        if: ${{ inputs.arch != 'linux/amd64' }}
        uses: docker/setup-qemu-action@v2.1.0
        with:
          platforms: ${{ inputs.arch }}
      - name: Set up buildx
        uses: docker/setup-buildx-action@v2.5.0
      - name: dockerPush
        id: dockerPush
        uses: docker/build-push-action@v4.0.0
        with:
          context: ${{ inputs.buildContext }}
          platforms: ${{ inputs.arch }}
          build-args: ${{ inputs.buildArgs }}
          outputs: type=docker,dest=${{ runner.temp }}/testImage.tar
          tags: test
      - name: Run Docker image
        shell: sh -c "node --input-type module < {0}"
        env:
          inputs: ${{ toJSON(inputs) }}
        run: |
          import * as core from '@actions/core'
          import { execa } from 'execa'
          import { VM } from 'vm2'
          const inputs = JSON.parse(process.env.inputs)
          await execa('docker', ['load', '--input', `${process.env.RUNNER_TEMP}/testImage.tar`], {all: true, verbose: true, stdio: 'inherit'})
          const args = ['run', '--rm']
          if (inputs.dockerRunArgs) {
            args.push(...inputs.dockerRunArgs.split(' '))
          }
          args.push('test')
          if (inputs.appArgs) {
            args.push(...inputs.appArgs.split(' '))
          }
          const result = await execa('docker', args, {all: true, verbose: true})
          const sandboxGlobals = {
            result,
            inputs
          }
          console.dir(sandboxGlobals)
          if (inputs.test) {
            const vm = new VM({
              sandbox: sandboxGlobals
            })
            const validation = vm.run(inputs.test)
            if (!validation) {
              throw new Error('Validation expression returned ' + validation)
            }
          }