name: testDocker
on:
  workflow_call:
    inputs:
      arch:
        type: string
        required: false
        default: ''
        description: List of image archs to build, comma separated without spaces
      buildContext:
        type: string
        required: false
        default: src
      buildArgs:
        type: string
        required: false
        default: ''
      runArgs:
        type: string
        required: false
        default: --init
      appArgs:
        type: string
        required: false
        default: ''
    outputs:
      meta:
        value: ${{ jobs.job.outputs.meta }}
jobs:
  job:
    name: ${{ github.event_name }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      meta: ${{ steps.dockerPush.outputs.metadata }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0
      - name: setupNode
        uses: actions/setup-node@v3.6.0
        with:
          node-version: current
      - name: installNodePackages
        shell: bash
        run: |
          cd ..
          npm install --no-package-lock --no-save @actions/core read-file-string execa
      - name: ls
        shell: bash
        run: |
          ls -lah ..
          ls -lah ../node_modules
          ls -lah .
      - name: getArch
        id: getArch
        shell: sh -c "node --input-type module < {0}"
        env:
          inputs: ${{ toJSON(inputs) }}
        run: |
          import * as core from '@actions/core'
          import readFileString from 'read-file-string'
          const inputs = JSON.parse(process.env.inputs)
          const getArch = async () => {
            if (inputs.arch) {
              return inputs.arch.split(',')
            } else {
              const archLines = await readFileString.default('arch.lines')
              if (archLines) {
                return archLines.split('\n').map(line => line.trim()).filter(Boolean)
              } else {
                return ['linux/amd64']
              }
            }
          }
          const archs = await getArch()
          core.setOutput('arch', archs.join('\n'))
      - name: Set up qemu
        if: ${{ steps.getArch.outputs.arch != 'linux/amd64' }}
        uses: docker/setup-qemu-action@v2.1.0
        with:
          platforms: ${{ steps.getArch.outputs.arch }}
      - name: Set up buildx
        uses: docker/setup-buildx-action@v2.5.0
      - name: dockerPush
        id: dockerPush
        uses: docker/build-push-action@v4.0.0
        with:
          context: ${{ inputs.buildContext }}
          platforms: ${{ steps.getArch.outputs.arch }}
          build-args: ${{ inputs.buildArgs }}
          outputs: type=docker,dest=${{ runner.temp }}/testImage.tar
          tags: test
          load: true
      - name: Run Docker image
        shell: sh -c "node --input-type module < {0}"
        env:
          inputs: ${{ toJSON(inputs) }}
        run: |
          import * as core from '@actions/core'
          import { execa } from 'execa'
          const inputs = JSON.parse(process.env.inputs)
          await execa('docker', ['load', '--input', `${process.env.RUNNER_TEMP}/testImage.tar`], {all: true, verbose: true, stdio: 'inherit'})
          const args = ['run', '--rm']
          if (inputs.runArgs) {
            args.push(...inputs.runArgs.split(' '))
          }
          args.push('test')
          if (inputs.appArgs) {
            args.push(...inputs.appArgs.split(' '))
          }
          await execa('docker', args, {all: true, verbose: true, stdio: 'inherit'})